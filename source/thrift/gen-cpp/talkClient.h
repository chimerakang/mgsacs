/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef talkClient_H
#define talkClient_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "talker_types.h"

namespace kiwi {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class talkClientIf {
 public:
  virtual ~talkClientIf() {}

  /**
   * get the version of server
   * 
   * @param version
   */
  virtual void on_getVersion(const std::string& version) = 0;
  virtual void on_getVersion_failed(const std::string& why) = 0;

  /**
   * set user name api
   * 
   * @param userId
   */
  virtual void on_setUserName_succeeded(const int64_t userId) = 0;
  virtual void on_setUserName_failed(const std::string& why) = 0;

  /**
   * subscribe topic api
   * 
   * @param topicId
   */
  virtual void on_subscribe(const int64_t topicId) = 0;
  virtual void on_subscribe_failed(const std::string& why) = 0;

  /**
   * unsubscribe topic api
   */
  virtual void on_unsubscribe_succeeded() = 0;
  virtual void on_unsubscribe_failed(const std::string& why) = 0;

  /**
   * ship api
   * 
   * @param name
   * @param ship
   */
  virtual void on_subscribeShip(const std::string& name, const Ship& ship) = 0;
  virtual void on_subscribeShip_failed(const RequestException& exp) = 0;
};

class talkClientIfFactory {
 public:
  typedef talkClientIf Handler;

  virtual ~talkClientIfFactory() {}

  virtual talkClientIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(talkClientIf* /* handler */) = 0;
};

class talkClientIfSingletonFactory : virtual public talkClientIfFactory {
 public:
  talkClientIfSingletonFactory(const boost::shared_ptr<talkClientIf>& iface) : iface_(iface) {}
  virtual ~talkClientIfSingletonFactory() {}

  virtual talkClientIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(talkClientIf* /* handler */) {}

 protected:
  boost::shared_ptr<talkClientIf> iface_;
};

class talkClientNull : virtual public talkClientIf {
 public:
  virtual ~talkClientNull() {}
  void on_getVersion(const std::string& /* version */) {
    return;
  }
  void on_getVersion_failed(const std::string& /* why */) {
    return;
  }
  void on_setUserName_succeeded(const int64_t /* userId */) {
    return;
  }
  void on_setUserName_failed(const std::string& /* why */) {
    return;
  }
  void on_subscribe(const int64_t /* topicId */) {
    return;
  }
  void on_subscribe_failed(const std::string& /* why */) {
    return;
  }
  void on_unsubscribe_succeeded() {
    return;
  }
  void on_unsubscribe_failed(const std::string& /* why */) {
    return;
  }
  void on_subscribeShip(const std::string& /* name */, const Ship& /* ship */) {
    return;
  }
  void on_subscribeShip_failed(const RequestException& /* exp */) {
    return;
  }
};


class talkClient_on_getVersion_args {
 public:

  talkClient_on_getVersion_args(const talkClient_on_getVersion_args&);
  talkClient_on_getVersion_args& operator=(const talkClient_on_getVersion_args&);
  talkClient_on_getVersion_args() : version() {
  }

  virtual ~talkClient_on_getVersion_args() throw();
  std::string version;

  void __set_version(const std::string& val);

  bool operator == (const talkClient_on_getVersion_args & rhs) const
  {
    if (!(version == rhs.version))
      return false;
    return true;
  }
  bool operator != (const talkClient_on_getVersion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const talkClient_on_getVersion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class talkClient_on_getVersion_pargs {
 public:


  virtual ~talkClient_on_getVersion_pargs() throw();
  const std::string* version;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class talkClient_on_getVersion_failed_args {
 public:

  talkClient_on_getVersion_failed_args(const talkClient_on_getVersion_failed_args&);
  talkClient_on_getVersion_failed_args& operator=(const talkClient_on_getVersion_failed_args&);
  talkClient_on_getVersion_failed_args() : why() {
  }

  virtual ~talkClient_on_getVersion_failed_args() throw();
  std::string why;

  void __set_why(const std::string& val);

  bool operator == (const talkClient_on_getVersion_failed_args & rhs) const
  {
    if (!(why == rhs.why))
      return false;
    return true;
  }
  bool operator != (const talkClient_on_getVersion_failed_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const talkClient_on_getVersion_failed_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class talkClient_on_getVersion_failed_pargs {
 public:


  virtual ~talkClient_on_getVersion_failed_pargs() throw();
  const std::string* why;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class talkClient_on_setUserName_succeeded_args {
 public:

  talkClient_on_setUserName_succeeded_args(const talkClient_on_setUserName_succeeded_args&);
  talkClient_on_setUserName_succeeded_args& operator=(const talkClient_on_setUserName_succeeded_args&);
  talkClient_on_setUserName_succeeded_args() : userId(0) {
  }

  virtual ~talkClient_on_setUserName_succeeded_args() throw();
  int64_t userId;

  void __set_userId(const int64_t val);

  bool operator == (const talkClient_on_setUserName_succeeded_args & rhs) const
  {
    if (!(userId == rhs.userId))
      return false;
    return true;
  }
  bool operator != (const talkClient_on_setUserName_succeeded_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const talkClient_on_setUserName_succeeded_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class talkClient_on_setUserName_succeeded_pargs {
 public:


  virtual ~talkClient_on_setUserName_succeeded_pargs() throw();
  const int64_t* userId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class talkClient_on_setUserName_failed_args {
 public:

  talkClient_on_setUserName_failed_args(const talkClient_on_setUserName_failed_args&);
  talkClient_on_setUserName_failed_args& operator=(const talkClient_on_setUserName_failed_args&);
  talkClient_on_setUserName_failed_args() : why() {
  }

  virtual ~talkClient_on_setUserName_failed_args() throw();
  std::string why;

  void __set_why(const std::string& val);

  bool operator == (const talkClient_on_setUserName_failed_args & rhs) const
  {
    if (!(why == rhs.why))
      return false;
    return true;
  }
  bool operator != (const talkClient_on_setUserName_failed_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const talkClient_on_setUserName_failed_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class talkClient_on_setUserName_failed_pargs {
 public:


  virtual ~talkClient_on_setUserName_failed_pargs() throw();
  const std::string* why;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class talkClient_on_subscribe_args {
 public:

  talkClient_on_subscribe_args(const talkClient_on_subscribe_args&);
  talkClient_on_subscribe_args& operator=(const talkClient_on_subscribe_args&);
  talkClient_on_subscribe_args() : topicId(0) {
  }

  virtual ~talkClient_on_subscribe_args() throw();
  int64_t topicId;

  void __set_topicId(const int64_t val);

  bool operator == (const talkClient_on_subscribe_args & rhs) const
  {
    if (!(topicId == rhs.topicId))
      return false;
    return true;
  }
  bool operator != (const talkClient_on_subscribe_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const talkClient_on_subscribe_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class talkClient_on_subscribe_pargs {
 public:


  virtual ~talkClient_on_subscribe_pargs() throw();
  const int64_t* topicId;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class talkClient_on_subscribe_failed_args {
 public:

  talkClient_on_subscribe_failed_args(const talkClient_on_subscribe_failed_args&);
  talkClient_on_subscribe_failed_args& operator=(const talkClient_on_subscribe_failed_args&);
  talkClient_on_subscribe_failed_args() : why() {
  }

  virtual ~talkClient_on_subscribe_failed_args() throw();
  std::string why;

  void __set_why(const std::string& val);

  bool operator == (const talkClient_on_subscribe_failed_args & rhs) const
  {
    if (!(why == rhs.why))
      return false;
    return true;
  }
  bool operator != (const talkClient_on_subscribe_failed_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const talkClient_on_subscribe_failed_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class talkClient_on_subscribe_failed_pargs {
 public:


  virtual ~talkClient_on_subscribe_failed_pargs() throw();
  const std::string* why;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class talkClient_on_unsubscribe_succeeded_args {
 public:

  talkClient_on_unsubscribe_succeeded_args(const talkClient_on_unsubscribe_succeeded_args&);
  talkClient_on_unsubscribe_succeeded_args& operator=(const talkClient_on_unsubscribe_succeeded_args&);
  talkClient_on_unsubscribe_succeeded_args() {
  }

  virtual ~talkClient_on_unsubscribe_succeeded_args() throw();

  bool operator == (const talkClient_on_unsubscribe_succeeded_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const talkClient_on_unsubscribe_succeeded_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const talkClient_on_unsubscribe_succeeded_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class talkClient_on_unsubscribe_succeeded_pargs {
 public:


  virtual ~talkClient_on_unsubscribe_succeeded_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class talkClient_on_unsubscribe_failed_args {
 public:

  talkClient_on_unsubscribe_failed_args(const talkClient_on_unsubscribe_failed_args&);
  talkClient_on_unsubscribe_failed_args& operator=(const talkClient_on_unsubscribe_failed_args&);
  talkClient_on_unsubscribe_failed_args() : why() {
  }

  virtual ~talkClient_on_unsubscribe_failed_args() throw();
  std::string why;

  void __set_why(const std::string& val);

  bool operator == (const talkClient_on_unsubscribe_failed_args & rhs) const
  {
    if (!(why == rhs.why))
      return false;
    return true;
  }
  bool operator != (const talkClient_on_unsubscribe_failed_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const talkClient_on_unsubscribe_failed_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class talkClient_on_unsubscribe_failed_pargs {
 public:


  virtual ~talkClient_on_unsubscribe_failed_pargs() throw();
  const std::string* why;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class talkClient_on_subscribeShip_args {
 public:

  talkClient_on_subscribeShip_args(const talkClient_on_subscribeShip_args&);
  talkClient_on_subscribeShip_args& operator=(const talkClient_on_subscribeShip_args&);
  talkClient_on_subscribeShip_args() : name() {
  }

  virtual ~talkClient_on_subscribeShip_args() throw();
  std::string name;
  Ship ship;

  void __set_name(const std::string& val);

  void __set_ship(const Ship& val);

  bool operator == (const talkClient_on_subscribeShip_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    if (!(ship == rhs.ship))
      return false;
    return true;
  }
  bool operator != (const talkClient_on_subscribeShip_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const talkClient_on_subscribeShip_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class talkClient_on_subscribeShip_pargs {
 public:


  virtual ~talkClient_on_subscribeShip_pargs() throw();
  const std::string* name;
  const Ship* ship;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class talkClient_on_subscribeShip_failed_args {
 public:

  talkClient_on_subscribeShip_failed_args(const talkClient_on_subscribeShip_failed_args&);
  talkClient_on_subscribeShip_failed_args& operator=(const talkClient_on_subscribeShip_failed_args&);
  talkClient_on_subscribeShip_failed_args() {
  }

  virtual ~talkClient_on_subscribeShip_failed_args() throw();
  RequestException exp;

  void __set_exp(const RequestException& val);

  bool operator == (const talkClient_on_subscribeShip_failed_args & rhs) const
  {
    if (!(exp == rhs.exp))
      return false;
    return true;
  }
  bool operator != (const talkClient_on_subscribeShip_failed_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const talkClient_on_subscribeShip_failed_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class talkClient_on_subscribeShip_failed_pargs {
 public:


  virtual ~talkClient_on_subscribeShip_failed_pargs() throw();
  const RequestException exp;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class talkClientClient : virtual public talkClientIf {
 public:
  talkClientClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  talkClientClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void on_getVersion(const std::string& version);
  void send_on_getVersion(const std::string& version);
  void on_getVersion_failed(const std::string& why);
  void send_on_getVersion_failed(const std::string& why);
  void on_setUserName_succeeded(const int64_t userId);
  void send_on_setUserName_succeeded(const int64_t userId);
  void on_setUserName_failed(const std::string& why);
  void send_on_setUserName_failed(const std::string& why);
  void on_subscribe(const int64_t topicId);
  void send_on_subscribe(const int64_t topicId);
  void on_subscribe_failed(const std::string& why);
  void send_on_subscribe_failed(const std::string& why);
  void on_unsubscribe_succeeded();
  void send_on_unsubscribe_succeeded();
  void on_unsubscribe_failed(const std::string& why);
  void send_on_unsubscribe_failed(const std::string& why);
  void on_subscribeShip(const std::string& name, const Ship& ship);
  void send_on_subscribeShip(const std::string& name, const Ship& ship);
  void on_subscribeShip_failed(const RequestException& exp);
  void send_on_subscribeShip_failed(const RequestException& exp);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class talkClientProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<talkClientIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (talkClientProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_on_getVersion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_on_getVersion_failed(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_on_setUserName_succeeded(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_on_setUserName_failed(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_on_subscribe(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_on_subscribe_failed(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_on_unsubscribe_succeeded(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_on_unsubscribe_failed(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_on_subscribeShip(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_on_subscribeShip_failed(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  talkClientProcessor(boost::shared_ptr<talkClientIf> iface) :
    iface_(iface) {
    processMap_["on_getVersion"] = &talkClientProcessor::process_on_getVersion;
    processMap_["on_getVersion_failed"] = &talkClientProcessor::process_on_getVersion_failed;
    processMap_["on_setUserName_succeeded"] = &talkClientProcessor::process_on_setUserName_succeeded;
    processMap_["on_setUserName_failed"] = &talkClientProcessor::process_on_setUserName_failed;
    processMap_["on_subscribe"] = &talkClientProcessor::process_on_subscribe;
    processMap_["on_subscribe_failed"] = &talkClientProcessor::process_on_subscribe_failed;
    processMap_["on_unsubscribe_succeeded"] = &talkClientProcessor::process_on_unsubscribe_succeeded;
    processMap_["on_unsubscribe_failed"] = &talkClientProcessor::process_on_unsubscribe_failed;
    processMap_["on_subscribeShip"] = &talkClientProcessor::process_on_subscribeShip;
    processMap_["on_subscribeShip_failed"] = &talkClientProcessor::process_on_subscribeShip_failed;
  }

  virtual ~talkClientProcessor() {}
};

class talkClientProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  talkClientProcessorFactory(const ::boost::shared_ptr< talkClientIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< talkClientIfFactory > handlerFactory_;
};

class talkClientMultiface : virtual public talkClientIf {
 public:
  talkClientMultiface(std::vector<boost::shared_ptr<talkClientIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~talkClientMultiface() {}
 protected:
  std::vector<boost::shared_ptr<talkClientIf> > ifaces_;
  talkClientMultiface() {}
  void add(boost::shared_ptr<talkClientIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void on_getVersion(const std::string& version) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->on_getVersion(version);
    }
    ifaces_[i]->on_getVersion(version);
  }

  void on_getVersion_failed(const std::string& why) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->on_getVersion_failed(why);
    }
    ifaces_[i]->on_getVersion_failed(why);
  }

  void on_setUserName_succeeded(const int64_t userId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->on_setUserName_succeeded(userId);
    }
    ifaces_[i]->on_setUserName_succeeded(userId);
  }

  void on_setUserName_failed(const std::string& why) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->on_setUserName_failed(why);
    }
    ifaces_[i]->on_setUserName_failed(why);
  }

  void on_subscribe(const int64_t topicId) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->on_subscribe(topicId);
    }
    ifaces_[i]->on_subscribe(topicId);
  }

  void on_subscribe_failed(const std::string& why) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->on_subscribe_failed(why);
    }
    ifaces_[i]->on_subscribe_failed(why);
  }

  void on_unsubscribe_succeeded() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->on_unsubscribe_succeeded();
    }
    ifaces_[i]->on_unsubscribe_succeeded();
  }

  void on_unsubscribe_failed(const std::string& why) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->on_unsubscribe_failed(why);
    }
    ifaces_[i]->on_unsubscribe_failed(why);
  }

  void on_subscribeShip(const std::string& name, const Ship& ship) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->on_subscribeShip(name, ship);
    }
    ifaces_[i]->on_subscribeShip(name, ship);
  }

  void on_subscribeShip_failed(const RequestException& exp) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->on_subscribeShip_failed(exp);
    }
    ifaces_[i]->on_subscribeShip_failed(exp);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class talkClientConcurrentClient : virtual public talkClientIf {
 public:
  talkClientConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  talkClientConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void on_getVersion(const std::string& version);
  void send_on_getVersion(const std::string& version);
  void on_getVersion_failed(const std::string& why);
  void send_on_getVersion_failed(const std::string& why);
  void on_setUserName_succeeded(const int64_t userId);
  void send_on_setUserName_succeeded(const int64_t userId);
  void on_setUserName_failed(const std::string& why);
  void send_on_setUserName_failed(const std::string& why);
  void on_subscribe(const int64_t topicId);
  void send_on_subscribe(const int64_t topicId);
  void on_subscribe_failed(const std::string& why);
  void send_on_subscribe_failed(const std::string& why);
  void on_unsubscribe_succeeded();
  void send_on_unsubscribe_succeeded();
  void on_unsubscribe_failed(const std::string& why);
  void send_on_unsubscribe_failed(const std::string& why);
  void on_subscribeShip(const std::string& name, const Ship& ship);
  void send_on_subscribeShip(const std::string& name, const Ship& ship);
  void on_subscribeShip_failed(const RequestException& exp);
  void send_on_subscribeShip_failed(const RequestException& exp);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
