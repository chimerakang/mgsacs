/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef baseService_H
#define baseService_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "talker_types.h"

namespace kiwi {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class baseServiceIf {
 public:
  virtual ~baseServiceIf() {}
  virtual void ConnectDB() = 0;
  virtual void FindUid(std::string& _return, const std::string& email, const std::string& phoneNo) = 0;
  virtual bool FindEmail(const std::string& email) = 0;
  virtual int32_t Ping() = 0;

  /**
   * get the version of server
   */
  virtual void GetVersion(std::string& _return) = 0;
  virtual void subscribe(const std::string& topic) = 0;
  virtual void unsubscribe(const std::string& topic) = 0;

  /**
   * ship api
   * 
   * @param channel
   * @param ship
   */
  virtual void postShip(const std::string& channel, const Ship& ship) = 0;
  virtual void receiveShip(const Ship& ship) = 0;
};

class baseServiceIfFactory {
 public:
  typedef baseServiceIf Handler;

  virtual ~baseServiceIfFactory() {}

  virtual baseServiceIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(baseServiceIf* /* handler */) = 0;
};

class baseServiceIfSingletonFactory : virtual public baseServiceIfFactory {
 public:
  baseServiceIfSingletonFactory(const boost::shared_ptr<baseServiceIf>& iface) : iface_(iface) {}
  virtual ~baseServiceIfSingletonFactory() {}

  virtual baseServiceIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(baseServiceIf* /* handler */) {}

 protected:
  boost::shared_ptr<baseServiceIf> iface_;
};

class baseServiceNull : virtual public baseServiceIf {
 public:
  virtual ~baseServiceNull() {}
  void ConnectDB() {
    return;
  }
  void FindUid(std::string& /* _return */, const std::string& /* email */, const std::string& /* phoneNo */) {
    return;
  }
  bool FindEmail(const std::string& /* email */) {
    bool _return = false;
    return _return;
  }
  int32_t Ping() {
    int32_t _return = 0;
    return _return;
  }
  void GetVersion(std::string& /* _return */) {
    return;
  }
  void subscribe(const std::string& /* topic */) {
    return;
  }
  void unsubscribe(const std::string& /* topic */) {
    return;
  }
  void postShip(const std::string& /* channel */, const Ship& /* ship */) {
    return;
  }
  void receiveShip(const Ship& /* ship */) {
    return;
  }
};


class baseService_ConnectDB_args {
 public:

  baseService_ConnectDB_args(const baseService_ConnectDB_args&);
  baseService_ConnectDB_args& operator=(const baseService_ConnectDB_args&);
  baseService_ConnectDB_args() {
  }

  virtual ~baseService_ConnectDB_args() throw();

  bool operator == (const baseService_ConnectDB_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const baseService_ConnectDB_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const baseService_ConnectDB_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class baseService_ConnectDB_pargs {
 public:


  virtual ~baseService_ConnectDB_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _baseService_ConnectDB_result__isset {
  _baseService_ConnectDB_result__isset() : re(false), te(false) {}
  bool re :1;
  bool te :1;
} _baseService_ConnectDB_result__isset;

class baseService_ConnectDB_result {
 public:

  baseService_ConnectDB_result(const baseService_ConnectDB_result&);
  baseService_ConnectDB_result& operator=(const baseService_ConnectDB_result&);
  baseService_ConnectDB_result() {
  }

  virtual ~baseService_ConnectDB_result() throw();
  RequestException re;
  TimedOutException te;

  _baseService_ConnectDB_result__isset __isset;

  void __set_re(const RequestException& val);

  void __set_te(const TimedOutException& val);

  bool operator == (const baseService_ConnectDB_result & rhs) const
  {
    if (!(re == rhs.re))
      return false;
    if (!(te == rhs.te))
      return false;
    return true;
  }
  bool operator != (const baseService_ConnectDB_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const baseService_ConnectDB_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _baseService_ConnectDB_presult__isset {
  _baseService_ConnectDB_presult__isset() : re(false), te(false) {}
  bool re :1;
  bool te :1;
} _baseService_ConnectDB_presult__isset;

class baseService_ConnectDB_presult {
 public:


  virtual ~baseService_ConnectDB_presult() throw();
  RequestException re;
  TimedOutException te;

  _baseService_ConnectDB_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class baseService_FindUid_args {
 public:

  baseService_FindUid_args(const baseService_FindUid_args&);
  baseService_FindUid_args& operator=(const baseService_FindUid_args&);
  baseService_FindUid_args() : email(), phoneNo() {
  }

  virtual ~baseService_FindUid_args() throw();
  std::string email;
  std::string phoneNo;

  void __set_email(const std::string& val);

  void __set_phoneNo(const std::string& val);

  bool operator == (const baseService_FindUid_args & rhs) const
  {
    if (!(email == rhs.email))
      return false;
    if (!(phoneNo == rhs.phoneNo))
      return false;
    return true;
  }
  bool operator != (const baseService_FindUid_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const baseService_FindUid_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class baseService_FindUid_pargs {
 public:


  virtual ~baseService_FindUid_pargs() throw();
  const std::string* email;
  const std::string* phoneNo;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _baseService_FindUid_result__isset {
  _baseService_FindUid_result__isset() : success(false), re(false), te(false) {}
  bool success :1;
  bool re :1;
  bool te :1;
} _baseService_FindUid_result__isset;

class baseService_FindUid_result {
 public:

  baseService_FindUid_result(const baseService_FindUid_result&);
  baseService_FindUid_result& operator=(const baseService_FindUid_result&);
  baseService_FindUid_result() : success() {
  }

  virtual ~baseService_FindUid_result() throw();
  std::string success;
  RequestException re;
  TimedOutException te;

  _baseService_FindUid_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_re(const RequestException& val);

  void __set_te(const TimedOutException& val);

  bool operator == (const baseService_FindUid_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(re == rhs.re))
      return false;
    if (!(te == rhs.te))
      return false;
    return true;
  }
  bool operator != (const baseService_FindUid_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const baseService_FindUid_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _baseService_FindUid_presult__isset {
  _baseService_FindUid_presult__isset() : success(false), re(false), te(false) {}
  bool success :1;
  bool re :1;
  bool te :1;
} _baseService_FindUid_presult__isset;

class baseService_FindUid_presult {
 public:


  virtual ~baseService_FindUid_presult() throw();
  std::string* success;
  RequestException re;
  TimedOutException te;

  _baseService_FindUid_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class baseService_FindEmail_args {
 public:

  baseService_FindEmail_args(const baseService_FindEmail_args&);
  baseService_FindEmail_args& operator=(const baseService_FindEmail_args&);
  baseService_FindEmail_args() : email() {
  }

  virtual ~baseService_FindEmail_args() throw();
  std::string email;

  void __set_email(const std::string& val);

  bool operator == (const baseService_FindEmail_args & rhs) const
  {
    if (!(email == rhs.email))
      return false;
    return true;
  }
  bool operator != (const baseService_FindEmail_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const baseService_FindEmail_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class baseService_FindEmail_pargs {
 public:


  virtual ~baseService_FindEmail_pargs() throw();
  const std::string* email;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _baseService_FindEmail_result__isset {
  _baseService_FindEmail_result__isset() : success(false), re(false), te(false) {}
  bool success :1;
  bool re :1;
  bool te :1;
} _baseService_FindEmail_result__isset;

class baseService_FindEmail_result {
 public:

  baseService_FindEmail_result(const baseService_FindEmail_result&);
  baseService_FindEmail_result& operator=(const baseService_FindEmail_result&);
  baseService_FindEmail_result() : success(0) {
  }

  virtual ~baseService_FindEmail_result() throw();
  bool success;
  RequestException re;
  TimedOutException te;

  _baseService_FindEmail_result__isset __isset;

  void __set_success(const bool val);

  void __set_re(const RequestException& val);

  void __set_te(const TimedOutException& val);

  bool operator == (const baseService_FindEmail_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(re == rhs.re))
      return false;
    if (!(te == rhs.te))
      return false;
    return true;
  }
  bool operator != (const baseService_FindEmail_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const baseService_FindEmail_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _baseService_FindEmail_presult__isset {
  _baseService_FindEmail_presult__isset() : success(false), re(false), te(false) {}
  bool success :1;
  bool re :1;
  bool te :1;
} _baseService_FindEmail_presult__isset;

class baseService_FindEmail_presult {
 public:


  virtual ~baseService_FindEmail_presult() throw();
  bool* success;
  RequestException re;
  TimedOutException te;

  _baseService_FindEmail_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class baseService_Ping_args {
 public:

  baseService_Ping_args(const baseService_Ping_args&);
  baseService_Ping_args& operator=(const baseService_Ping_args&);
  baseService_Ping_args() {
  }

  virtual ~baseService_Ping_args() throw();

  bool operator == (const baseService_Ping_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const baseService_Ping_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const baseService_Ping_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class baseService_Ping_pargs {
 public:


  virtual ~baseService_Ping_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _baseService_Ping_result__isset {
  _baseService_Ping_result__isset() : success(false) {}
  bool success :1;
} _baseService_Ping_result__isset;

class baseService_Ping_result {
 public:

  baseService_Ping_result(const baseService_Ping_result&);
  baseService_Ping_result& operator=(const baseService_Ping_result&);
  baseService_Ping_result() : success(0) {
  }

  virtual ~baseService_Ping_result() throw();
  int32_t success;

  _baseService_Ping_result__isset __isset;

  void __set_success(const int32_t val);

  bool operator == (const baseService_Ping_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    return true;
  }
  bool operator != (const baseService_Ping_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const baseService_Ping_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _baseService_Ping_presult__isset {
  _baseService_Ping_presult__isset() : success(false) {}
  bool success :1;
} _baseService_Ping_presult__isset;

class baseService_Ping_presult {
 public:


  virtual ~baseService_Ping_presult() throw();
  int32_t* success;

  _baseService_Ping_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class baseService_GetVersion_args {
 public:

  baseService_GetVersion_args(const baseService_GetVersion_args&);
  baseService_GetVersion_args& operator=(const baseService_GetVersion_args&);
  baseService_GetVersion_args() {
  }

  virtual ~baseService_GetVersion_args() throw();

  bool operator == (const baseService_GetVersion_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const baseService_GetVersion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const baseService_GetVersion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class baseService_GetVersion_pargs {
 public:


  virtual ~baseService_GetVersion_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _baseService_GetVersion_result__isset {
  _baseService_GetVersion_result__isset() : success(false), re(false), te(false) {}
  bool success :1;
  bool re :1;
  bool te :1;
} _baseService_GetVersion_result__isset;

class baseService_GetVersion_result {
 public:

  baseService_GetVersion_result(const baseService_GetVersion_result&);
  baseService_GetVersion_result& operator=(const baseService_GetVersion_result&);
  baseService_GetVersion_result() : success() {
  }

  virtual ~baseService_GetVersion_result() throw();
  std::string success;
  RequestException re;
  TimedOutException te;

  _baseService_GetVersion_result__isset __isset;

  void __set_success(const std::string& val);

  void __set_re(const RequestException& val);

  void __set_te(const TimedOutException& val);

  bool operator == (const baseService_GetVersion_result & rhs) const
  {
    if (!(success == rhs.success))
      return false;
    if (!(re == rhs.re))
      return false;
    if (!(te == rhs.te))
      return false;
    return true;
  }
  bool operator != (const baseService_GetVersion_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const baseService_GetVersion_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _baseService_GetVersion_presult__isset {
  _baseService_GetVersion_presult__isset() : success(false), re(false), te(false) {}
  bool success :1;
  bool re :1;
  bool te :1;
} _baseService_GetVersion_presult__isset;

class baseService_GetVersion_presult {
 public:


  virtual ~baseService_GetVersion_presult() throw();
  std::string* success;
  RequestException re;
  TimedOutException te;

  _baseService_GetVersion_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class baseService_subscribe_args {
 public:

  baseService_subscribe_args(const baseService_subscribe_args&);
  baseService_subscribe_args& operator=(const baseService_subscribe_args&);
  baseService_subscribe_args() : topic() {
  }

  virtual ~baseService_subscribe_args() throw();
  std::string topic;

  void __set_topic(const std::string& val);

  bool operator == (const baseService_subscribe_args & rhs) const
  {
    if (!(topic == rhs.topic))
      return false;
    return true;
  }
  bool operator != (const baseService_subscribe_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const baseService_subscribe_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class baseService_subscribe_pargs {
 public:


  virtual ~baseService_subscribe_pargs() throw();
  const std::string* topic;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _baseService_subscribe_result__isset {
  _baseService_subscribe_result__isset() : re(false), te(false) {}
  bool re :1;
  bool te :1;
} _baseService_subscribe_result__isset;

class baseService_subscribe_result {
 public:

  baseService_subscribe_result(const baseService_subscribe_result&);
  baseService_subscribe_result& operator=(const baseService_subscribe_result&);
  baseService_subscribe_result() {
  }

  virtual ~baseService_subscribe_result() throw();
  RequestException re;
  TimedOutException te;

  _baseService_subscribe_result__isset __isset;

  void __set_re(const RequestException& val);

  void __set_te(const TimedOutException& val);

  bool operator == (const baseService_subscribe_result & rhs) const
  {
    if (!(re == rhs.re))
      return false;
    if (!(te == rhs.te))
      return false;
    return true;
  }
  bool operator != (const baseService_subscribe_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const baseService_subscribe_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _baseService_subscribe_presult__isset {
  _baseService_subscribe_presult__isset() : re(false), te(false) {}
  bool re :1;
  bool te :1;
} _baseService_subscribe_presult__isset;

class baseService_subscribe_presult {
 public:


  virtual ~baseService_subscribe_presult() throw();
  RequestException re;
  TimedOutException te;

  _baseService_subscribe_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class baseService_unsubscribe_args {
 public:

  baseService_unsubscribe_args(const baseService_unsubscribe_args&);
  baseService_unsubscribe_args& operator=(const baseService_unsubscribe_args&);
  baseService_unsubscribe_args() : topic() {
  }

  virtual ~baseService_unsubscribe_args() throw();
  std::string topic;

  void __set_topic(const std::string& val);

  bool operator == (const baseService_unsubscribe_args & rhs) const
  {
    if (!(topic == rhs.topic))
      return false;
    return true;
  }
  bool operator != (const baseService_unsubscribe_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const baseService_unsubscribe_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class baseService_unsubscribe_pargs {
 public:


  virtual ~baseService_unsubscribe_pargs() throw();
  const std::string* topic;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _baseService_unsubscribe_result__isset {
  _baseService_unsubscribe_result__isset() : re(false), te(false) {}
  bool re :1;
  bool te :1;
} _baseService_unsubscribe_result__isset;

class baseService_unsubscribe_result {
 public:

  baseService_unsubscribe_result(const baseService_unsubscribe_result&);
  baseService_unsubscribe_result& operator=(const baseService_unsubscribe_result&);
  baseService_unsubscribe_result() {
  }

  virtual ~baseService_unsubscribe_result() throw();
  RequestException re;
  TimedOutException te;

  _baseService_unsubscribe_result__isset __isset;

  void __set_re(const RequestException& val);

  void __set_te(const TimedOutException& val);

  bool operator == (const baseService_unsubscribe_result & rhs) const
  {
    if (!(re == rhs.re))
      return false;
    if (!(te == rhs.te))
      return false;
    return true;
  }
  bool operator != (const baseService_unsubscribe_result &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const baseService_unsubscribe_result & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

typedef struct _baseService_unsubscribe_presult__isset {
  _baseService_unsubscribe_presult__isset() : re(false), te(false) {}
  bool re :1;
  bool te :1;
} _baseService_unsubscribe_presult__isset;

class baseService_unsubscribe_presult {
 public:


  virtual ~baseService_unsubscribe_presult() throw();
  RequestException re;
  TimedOutException te;

  _baseService_unsubscribe_presult__isset __isset;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);

};


class baseService_postShip_args {
 public:

  baseService_postShip_args(const baseService_postShip_args&);
  baseService_postShip_args& operator=(const baseService_postShip_args&);
  baseService_postShip_args() : channel() {
  }

  virtual ~baseService_postShip_args() throw();
  std::string channel;
  Ship ship;

  void __set_channel(const std::string& val);

  void __set_ship(const Ship& val);

  bool operator == (const baseService_postShip_args & rhs) const
  {
    if (!(channel == rhs.channel))
      return false;
    if (!(ship == rhs.ship))
      return false;
    return true;
  }
  bool operator != (const baseService_postShip_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const baseService_postShip_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class baseService_postShip_pargs {
 public:


  virtual ~baseService_postShip_pargs() throw();
  const std::string* channel;
  const Ship* ship;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class baseService_receiveShip_args {
 public:

  baseService_receiveShip_args(const baseService_receiveShip_args&);
  baseService_receiveShip_args& operator=(const baseService_receiveShip_args&);
  baseService_receiveShip_args() {
  }

  virtual ~baseService_receiveShip_args() throw();
  Ship ship;

  void __set_ship(const Ship& val);

  bool operator == (const baseService_receiveShip_args & rhs) const
  {
    if (!(ship == rhs.ship))
      return false;
    return true;
  }
  bool operator != (const baseService_receiveShip_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const baseService_receiveShip_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class baseService_receiveShip_pargs {
 public:


  virtual ~baseService_receiveShip_pargs() throw();
  const Ship* ship;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class baseServiceClient : virtual public baseServiceIf {
 public:
  baseServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  baseServiceClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ConnectDB();
  void send_ConnectDB();
  void recv_ConnectDB();
  void FindUid(std::string& _return, const std::string& email, const std::string& phoneNo);
  void send_FindUid(const std::string& email, const std::string& phoneNo);
  void recv_FindUid(std::string& _return);
  bool FindEmail(const std::string& email);
  void send_FindEmail(const std::string& email);
  bool recv_FindEmail();
  int32_t Ping();
  void send_Ping();
  int32_t recv_Ping();
  void GetVersion(std::string& _return);
  void send_GetVersion();
  void recv_GetVersion(std::string& _return);
  void subscribe(const std::string& topic);
  void send_subscribe(const std::string& topic);
  void recv_subscribe();
  void unsubscribe(const std::string& topic);
  void send_unsubscribe(const std::string& topic);
  void recv_unsubscribe();
  void postShip(const std::string& channel, const Ship& ship);
  void send_postShip(const std::string& channel, const Ship& ship);
  void receiveShip(const Ship& ship);
  void send_receiveShip(const Ship& ship);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class baseServiceProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<baseServiceIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (baseServiceProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_ConnectDB(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_FindUid(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_FindEmail(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_Ping(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_GetVersion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_subscribe(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_unsubscribe(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postShip(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_receiveShip(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  baseServiceProcessor(boost::shared_ptr<baseServiceIf> iface) :
    iface_(iface) {
    processMap_["ConnectDB"] = &baseServiceProcessor::process_ConnectDB;
    processMap_["FindUid"] = &baseServiceProcessor::process_FindUid;
    processMap_["FindEmail"] = &baseServiceProcessor::process_FindEmail;
    processMap_["Ping"] = &baseServiceProcessor::process_Ping;
    processMap_["GetVersion"] = &baseServiceProcessor::process_GetVersion;
    processMap_["subscribe"] = &baseServiceProcessor::process_subscribe;
    processMap_["unsubscribe"] = &baseServiceProcessor::process_unsubscribe;
    processMap_["postShip"] = &baseServiceProcessor::process_postShip;
    processMap_["receiveShip"] = &baseServiceProcessor::process_receiveShip;
  }

  virtual ~baseServiceProcessor() {}
};

class baseServiceProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  baseServiceProcessorFactory(const ::boost::shared_ptr< baseServiceIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< baseServiceIfFactory > handlerFactory_;
};

class baseServiceMultiface : virtual public baseServiceIf {
 public:
  baseServiceMultiface(std::vector<boost::shared_ptr<baseServiceIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~baseServiceMultiface() {}
 protected:
  std::vector<boost::shared_ptr<baseServiceIf> > ifaces_;
  baseServiceMultiface() {}
  void add(boost::shared_ptr<baseServiceIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void ConnectDB() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->ConnectDB();
    }
    ifaces_[i]->ConnectDB();
  }

  void FindUid(std::string& _return, const std::string& email, const std::string& phoneNo) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->FindUid(_return, email, phoneNo);
    }
    ifaces_[i]->FindUid(_return, email, phoneNo);
    return;
  }

  bool FindEmail(const std::string& email) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->FindEmail(email);
    }
    return ifaces_[i]->FindEmail(email);
  }

  int32_t Ping() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->Ping();
    }
    return ifaces_[i]->Ping();
  }

  void GetVersion(std::string& _return) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->GetVersion(_return);
    }
    ifaces_[i]->GetVersion(_return);
    return;
  }

  void subscribe(const std::string& topic) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->subscribe(topic);
    }
    ifaces_[i]->subscribe(topic);
  }

  void unsubscribe(const std::string& topic) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->unsubscribe(topic);
    }
    ifaces_[i]->unsubscribe(topic);
  }

  void postShip(const std::string& channel, const Ship& ship) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postShip(channel, ship);
    }
    ifaces_[i]->postShip(channel, ship);
  }

  void receiveShip(const Ship& ship) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->receiveShip(ship);
    }
    ifaces_[i]->receiveShip(ship);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class baseServiceConcurrentClient : virtual public baseServiceIf {
 public:
  baseServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  baseServiceConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void ConnectDB();
  int32_t send_ConnectDB();
  void recv_ConnectDB(const int32_t seqid);
  void FindUid(std::string& _return, const std::string& email, const std::string& phoneNo);
  int32_t send_FindUid(const std::string& email, const std::string& phoneNo);
  void recv_FindUid(std::string& _return, const int32_t seqid);
  bool FindEmail(const std::string& email);
  int32_t send_FindEmail(const std::string& email);
  bool recv_FindEmail(const int32_t seqid);
  int32_t Ping();
  int32_t send_Ping();
  int32_t recv_Ping(const int32_t seqid);
  void GetVersion(std::string& _return);
  int32_t send_GetVersion();
  void recv_GetVersion(std::string& _return, const int32_t seqid);
  void subscribe(const std::string& topic);
  int32_t send_subscribe(const std::string& topic);
  void recv_subscribe(const int32_t seqid);
  void unsubscribe(const std::string& topic);
  int32_t send_unsubscribe(const std::string& topic);
  void recv_unsubscribe(const int32_t seqid);
  void postShip(const std::string& channel, const Ship& ship);
  void send_postShip(const std::string& channel, const Ship& ship);
  void receiveShip(const Ship& ship);
  void send_receiveShip(const Ship& ship);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
