// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "baseService.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::kiwi;

class baseServiceHandler : virtual public baseServiceIf {
 public:
  baseServiceHandler() {
    // Your initialization goes here
  }

  void ConnectDB() {
    // Your implementation goes here
    printf("ConnectDB\n");
  }

  void FindUid(std::string& _return, const std::string& email, const std::string& phoneNo) {
    // Your implementation goes here
    printf("FindUid\n");
  }

  bool FindEmail(const std::string& email) {
    // Your implementation goes here
    printf("FindEmail\n");
  }

  int32_t Ping() {
    // Your implementation goes here
    printf("Ping\n");
  }

  /**
   * get the version of server
   */
  void GetVersion(std::string& _return) {
    // Your implementation goes here
    printf("GetVersion\n");
  }

  void subscribe(const std::string& topic) {
    // Your implementation goes here
    printf("subscribe\n");
  }

  void unsubscribe(const std::string& topic) {
    // Your implementation goes here
    printf("unsubscribe\n");
  }

  /**
   * ship api
   * 
   * @param channel
   * @param ship
   */
  void postShip(const std::string& channel, const Ship& ship) {
    // Your implementation goes here
    printf("postShip\n");
  }

  void receiveShip(const Ship& ship) {
    // Your implementation goes here
    printf("receiveShip\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<baseServiceHandler> handler(new baseServiceHandler());
  shared_ptr<TProcessor> processor(new baseServiceProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

