/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#ifndef talkServer_H
#define talkServer_H

#include <thrift/TDispatchProcessor.h>
#include <thrift/async/TConcurrentClientSyncInfo.h>
#include "talker_types.h"

namespace kiwi {

#ifdef _WIN32
  #pragma warning( push )
  #pragma warning (disable : 4250 ) //inheriting methods via dominance 
#endif

class talkServerIf {
 public:
  virtual ~talkServerIf() {}

  /**
   * get the version of server
   */
  virtual void getVersion() = 0;

  /**
   * set user name api
   * 
   * @param name
   */
  virtual void setUserName(const std::string& name) = 0;

  /**
   * subscribe topic api
   * 
   * @param topic
   */
  virtual void subscribe(const std::string& topic) = 0;
  virtual void unsubscribe(const std::string& topic) = 0;

  /**
   * ship api
   * 
   * @param channel
   * @param ship
   */
  virtual void postShip(const std::string& channel, const Ship& ship) = 0;
};

class talkServerIfFactory {
 public:
  typedef talkServerIf Handler;

  virtual ~talkServerIfFactory() {}

  virtual talkServerIf* getHandler(const ::apache::thrift::TConnectionInfo& connInfo) = 0;
  virtual void releaseHandler(talkServerIf* /* handler */) = 0;
};

class talkServerIfSingletonFactory : virtual public talkServerIfFactory {
 public:
  talkServerIfSingletonFactory(const boost::shared_ptr<talkServerIf>& iface) : iface_(iface) {}
  virtual ~talkServerIfSingletonFactory() {}

  virtual talkServerIf* getHandler(const ::apache::thrift::TConnectionInfo&) {
    return iface_.get();
  }
  virtual void releaseHandler(talkServerIf* /* handler */) {}

 protected:
  boost::shared_ptr<talkServerIf> iface_;
};

class talkServerNull : virtual public talkServerIf {
 public:
  virtual ~talkServerNull() {}
  void getVersion() {
    return;
  }
  void setUserName(const std::string& /* name */) {
    return;
  }
  void subscribe(const std::string& /* topic */) {
    return;
  }
  void unsubscribe(const std::string& /* topic */) {
    return;
  }
  void postShip(const std::string& /* channel */, const Ship& /* ship */) {
    return;
  }
};


class talkServer_getVersion_args {
 public:

  talkServer_getVersion_args(const talkServer_getVersion_args&);
  talkServer_getVersion_args& operator=(const talkServer_getVersion_args&);
  talkServer_getVersion_args() {
  }

  virtual ~talkServer_getVersion_args() throw();

  bool operator == (const talkServer_getVersion_args & /* rhs */) const
  {
    return true;
  }
  bool operator != (const talkServer_getVersion_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const talkServer_getVersion_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class talkServer_getVersion_pargs {
 public:


  virtual ~talkServer_getVersion_pargs() throw();

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class talkServer_setUserName_args {
 public:

  talkServer_setUserName_args(const talkServer_setUserName_args&);
  talkServer_setUserName_args& operator=(const talkServer_setUserName_args&);
  talkServer_setUserName_args() : name() {
  }

  virtual ~talkServer_setUserName_args() throw();
  std::string name;

  void __set_name(const std::string& val);

  bool operator == (const talkServer_setUserName_args & rhs) const
  {
    if (!(name == rhs.name))
      return false;
    return true;
  }
  bool operator != (const talkServer_setUserName_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const talkServer_setUserName_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class talkServer_setUserName_pargs {
 public:


  virtual ~talkServer_setUserName_pargs() throw();
  const std::string* name;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class talkServer_subscribe_args {
 public:

  talkServer_subscribe_args(const talkServer_subscribe_args&);
  talkServer_subscribe_args& operator=(const talkServer_subscribe_args&);
  talkServer_subscribe_args() : topic() {
  }

  virtual ~talkServer_subscribe_args() throw();
  std::string topic;

  void __set_topic(const std::string& val);

  bool operator == (const talkServer_subscribe_args & rhs) const
  {
    if (!(topic == rhs.topic))
      return false;
    return true;
  }
  bool operator != (const talkServer_subscribe_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const talkServer_subscribe_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class talkServer_subscribe_pargs {
 public:


  virtual ~talkServer_subscribe_pargs() throw();
  const std::string* topic;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class talkServer_unsubscribe_args {
 public:

  talkServer_unsubscribe_args(const talkServer_unsubscribe_args&);
  talkServer_unsubscribe_args& operator=(const talkServer_unsubscribe_args&);
  talkServer_unsubscribe_args() : topic() {
  }

  virtual ~talkServer_unsubscribe_args() throw();
  std::string topic;

  void __set_topic(const std::string& val);

  bool operator == (const talkServer_unsubscribe_args & rhs) const
  {
    if (!(topic == rhs.topic))
      return false;
    return true;
  }
  bool operator != (const talkServer_unsubscribe_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const talkServer_unsubscribe_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class talkServer_unsubscribe_pargs {
 public:


  virtual ~talkServer_unsubscribe_pargs() throw();
  const std::string* topic;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class talkServer_postShip_args {
 public:

  talkServer_postShip_args(const talkServer_postShip_args&);
  talkServer_postShip_args& operator=(const talkServer_postShip_args&);
  talkServer_postShip_args() : channel() {
  }

  virtual ~talkServer_postShip_args() throw();
  std::string channel;
  Ship ship;

  void __set_channel(const std::string& val);

  void __set_ship(const Ship& val);

  bool operator == (const talkServer_postShip_args & rhs) const
  {
    if (!(channel == rhs.channel))
      return false;
    if (!(ship == rhs.ship))
      return false;
    return true;
  }
  bool operator != (const talkServer_postShip_args &rhs) const {
    return !(*this == rhs);
  }

  bool operator < (const talkServer_postShip_args & ) const;

  uint32_t read(::apache::thrift::protocol::TProtocol* iprot);
  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};


class talkServer_postShip_pargs {
 public:


  virtual ~talkServer_postShip_pargs() throw();
  const std::string* channel;
  const Ship* ship;

  uint32_t write(::apache::thrift::protocol::TProtocol* oprot) const;

};

class talkServerClient : virtual public talkServerIf {
 public:
  talkServerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  talkServerClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getVersion();
  void send_getVersion();
  void setUserName(const std::string& name);
  void send_setUserName(const std::string& name);
  void subscribe(const std::string& topic);
  void send_subscribe(const std::string& topic);
  void unsubscribe(const std::string& topic);
  void send_unsubscribe(const std::string& topic);
  void postShip(const std::string& channel, const Ship& ship);
  void send_postShip(const std::string& channel, const Ship& ship);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
};

class talkServerProcessor : public ::apache::thrift::TDispatchProcessor {
 protected:
  boost::shared_ptr<talkServerIf> iface_;
  virtual bool dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext);
 private:
  typedef  void (talkServerProcessor::*ProcessFunction)(int32_t, ::apache::thrift::protocol::TProtocol*, ::apache::thrift::protocol::TProtocol*, void*);
  typedef std::map<std::string, ProcessFunction> ProcessMap;
  ProcessMap processMap_;
  void process_getVersion(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_setUserName(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_subscribe(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_unsubscribe(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
  void process_postShip(int32_t seqid, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, void* callContext);
 public:
  talkServerProcessor(boost::shared_ptr<talkServerIf> iface) :
    iface_(iface) {
    processMap_["getVersion"] = &talkServerProcessor::process_getVersion;
    processMap_["setUserName"] = &talkServerProcessor::process_setUserName;
    processMap_["subscribe"] = &talkServerProcessor::process_subscribe;
    processMap_["unsubscribe"] = &talkServerProcessor::process_unsubscribe;
    processMap_["postShip"] = &talkServerProcessor::process_postShip;
  }

  virtual ~talkServerProcessor() {}
};

class talkServerProcessorFactory : public ::apache::thrift::TProcessorFactory {
 public:
  talkServerProcessorFactory(const ::boost::shared_ptr< talkServerIfFactory >& handlerFactory) :
      handlerFactory_(handlerFactory) {}

  ::boost::shared_ptr< ::apache::thrift::TProcessor > getProcessor(const ::apache::thrift::TConnectionInfo& connInfo);

 protected:
  ::boost::shared_ptr< talkServerIfFactory > handlerFactory_;
};

class talkServerMultiface : virtual public talkServerIf {
 public:
  talkServerMultiface(std::vector<boost::shared_ptr<talkServerIf> >& ifaces) : ifaces_(ifaces) {
  }
  virtual ~talkServerMultiface() {}
 protected:
  std::vector<boost::shared_ptr<talkServerIf> > ifaces_;
  talkServerMultiface() {}
  void add(boost::shared_ptr<talkServerIf> iface) {
    ifaces_.push_back(iface);
  }
 public:
  void getVersion() {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->getVersion();
    }
    ifaces_[i]->getVersion();
  }

  void setUserName(const std::string& name) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->setUserName(name);
    }
    ifaces_[i]->setUserName(name);
  }

  void subscribe(const std::string& topic) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->subscribe(topic);
    }
    ifaces_[i]->subscribe(topic);
  }

  void unsubscribe(const std::string& topic) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->unsubscribe(topic);
    }
    ifaces_[i]->unsubscribe(topic);
  }

  void postShip(const std::string& channel, const Ship& ship) {
    size_t sz = ifaces_.size();
    size_t i = 0;
    for (; i < (sz - 1); ++i) {
      ifaces_[i]->postShip(channel, ship);
    }
    ifaces_[i]->postShip(channel, ship);
  }

};

// The 'concurrent' client is a thread safe client that correctly handles
// out of order responses.  It is slower than the regular client, so should
// only be used when you need to share a connection among multiple threads
class talkServerConcurrentClient : virtual public talkServerIf {
 public:
  talkServerConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
    setProtocol(prot);
  }
  talkServerConcurrentClient(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    setProtocol(iprot,oprot);
  }
 private:
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> prot) {
  setProtocol(prot,prot);
  }
  void setProtocol(boost::shared_ptr< ::apache::thrift::protocol::TProtocol> iprot, boost::shared_ptr< ::apache::thrift::protocol::TProtocol> oprot) {
    piprot_=iprot;
    poprot_=oprot;
    iprot_ = iprot.get();
    oprot_ = oprot.get();
  }
 public:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getInputProtocol() {
    return piprot_;
  }
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> getOutputProtocol() {
    return poprot_;
  }
  void getVersion();
  void send_getVersion();
  void setUserName(const std::string& name);
  void send_setUserName(const std::string& name);
  void subscribe(const std::string& topic);
  void send_subscribe(const std::string& topic);
  void unsubscribe(const std::string& topic);
  void send_unsubscribe(const std::string& topic);
  void postShip(const std::string& channel, const Ship& ship);
  void send_postShip(const std::string& channel, const Ship& ship);
 protected:
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> piprot_;
  boost::shared_ptr< ::apache::thrift::protocol::TProtocol> poprot_;
  ::apache::thrift::protocol::TProtocol* iprot_;
  ::apache::thrift::protocol::TProtocol* oprot_;
  ::apache::thrift::async::TConcurrentClientSyncInfo sync_;
};

#ifdef _WIN32
  #pragma warning( pop )
#endif

} // namespace

#endif
