// This autogenerated skeleton file illustrates how to build a server.
// You should copy it to another filename to avoid overwriting it.

#include "talkServer.h"
#include <thrift/protocol/TBinaryProtocol.h>
#include <thrift/server/TSimpleServer.h>
#include <thrift/transport/TServerSocket.h>
#include <thrift/transport/TBufferTransports.h>

using namespace ::apache::thrift;
using namespace ::apache::thrift::protocol;
using namespace ::apache::thrift::transport;
using namespace ::apache::thrift::server;

using boost::shared_ptr;

using namespace  ::kiwi;

class talkServerHandler : virtual public talkServerIf {
 public:
  talkServerHandler() {
    // Your initialization goes here
  }

  /**
   * get the version of server
   */
  void getVersion() {
    // Your implementation goes here
    printf("getVersion\n");
  }

  /**
   * set user name api
   * 
   * @param name
   */
  void setUserName(const std::string& name) {
    // Your implementation goes here
    printf("setUserName\n");
  }

  /**
   * subscribe topic api
   * 
   * @param topic
   */
  void subscribe(const std::string& topic) {
    // Your implementation goes here
    printf("subscribe\n");
  }

  void unsubscribe(const std::string& topic) {
    // Your implementation goes here
    printf("unsubscribe\n");
  }

  /**
   * ship api
   * 
   * @param channel
   * @param ship
   */
  void postShip(const std::string& channel, const Ship& ship) {
    // Your implementation goes here
    printf("postShip\n");
  }

};

int main(int argc, char **argv) {
  int port = 9090;
  shared_ptr<talkServerHandler> handler(new talkServerHandler());
  shared_ptr<TProcessor> processor(new talkServerProcessor(handler));
  shared_ptr<TServerTransport> serverTransport(new TServerSocket(port));
  shared_ptr<TTransportFactory> transportFactory(new TBufferedTransportFactory());
  shared_ptr<TProtocolFactory> protocolFactory(new TBinaryProtocolFactory());

  TSimpleServer server(processor, serverTransport, transportFactory, protocolFactory);
  server.serve();
  return 0;
}

