/**
 * Autogenerated by Thrift Compiler (0.9.3)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
#include "talkServer.h"

namespace kiwi {


talkServer_getVersion_args::~talkServer_getVersion_args() throw() {
}


uint32_t talkServer_getVersion_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;


  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    xfer += iprot->skip(ftype);
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  return xfer;
}

uint32_t talkServer_getVersion_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("talkServer_getVersion_args");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


talkServer_getVersion_pargs::~talkServer_getVersion_pargs() throw() {
}


uint32_t talkServer_getVersion_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("talkServer_getVersion_pargs");

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


talkServer_setUserName_args::~talkServer_setUserName_args() throw() {
}


uint32_t talkServer_setUserName_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_name = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->name);
          isset_name = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_name)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t talkServer_setUserName_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("talkServer_setUserName_args");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->name);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


talkServer_setUserName_pargs::~talkServer_setUserName_pargs() throw() {
}


uint32_t talkServer_setUserName_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("talkServer_setUserName_pargs");

  xfer += oprot->writeFieldBegin("name", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString((*(this->name)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


talkServer_subscribe_args::~talkServer_subscribe_args() throw() {
}


uint32_t talkServer_subscribe_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_topic = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->topic);
          isset_topic = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_topic)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t talkServer_subscribe_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("talkServer_subscribe_args");

  xfer += oprot->writeFieldBegin("topic", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->topic);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


talkServer_subscribe_pargs::~talkServer_subscribe_pargs() throw() {
}


uint32_t talkServer_subscribe_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("talkServer_subscribe_pargs");

  xfer += oprot->writeFieldBegin("topic", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString((*(this->topic)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


talkServer_unsubscribe_args::~talkServer_unsubscribe_args() throw() {
}


uint32_t talkServer_unsubscribe_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_topic = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->topic);
          isset_topic = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_topic)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t talkServer_unsubscribe_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("talkServer_unsubscribe_args");

  xfer += oprot->writeFieldBegin("topic", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->topic);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


talkServer_unsubscribe_pargs::~talkServer_unsubscribe_pargs() throw() {
}


uint32_t talkServer_unsubscribe_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("talkServer_unsubscribe_pargs");

  xfer += oprot->writeFieldBegin("topic", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString((*(this->topic)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


talkServer_postShip_args::~talkServer_postShip_args() throw() {
}


uint32_t talkServer_postShip_args::read(::apache::thrift::protocol::TProtocol* iprot) {

  apache::thrift::protocol::TInputRecursionTracker tracker(*iprot);
  uint32_t xfer = 0;
  std::string fname;
  ::apache::thrift::protocol::TType ftype;
  int16_t fid;

  xfer += iprot->readStructBegin(fname);

  using ::apache::thrift::protocol::TProtocolException;

  bool isset_channel = false;
  bool isset_ship = false;

  while (true)
  {
    xfer += iprot->readFieldBegin(fname, ftype, fid);
    if (ftype == ::apache::thrift::protocol::T_STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
        if (ftype == ::apache::thrift::protocol::T_STRING) {
          xfer += iprot->readString(this->channel);
          isset_channel = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      case 2:
        if (ftype == ::apache::thrift::protocol::T_STRUCT) {
          xfer += this->ship.read(iprot);
          isset_ship = true;
        } else {
          xfer += iprot->skip(ftype);
        }
        break;
      default:
        xfer += iprot->skip(ftype);
        break;
    }
    xfer += iprot->readFieldEnd();
  }

  xfer += iprot->readStructEnd();

  if (!isset_channel)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  if (!isset_ship)
    throw TProtocolException(TProtocolException::INVALID_DATA);
  return xfer;
}

uint32_t talkServer_postShip_args::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("talkServer_postShip_args");

  xfer += oprot->writeFieldBegin("channel", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString(this->channel);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ship", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += this->ship.write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}


talkServer_postShip_pargs::~talkServer_postShip_pargs() throw() {
}


uint32_t talkServer_postShip_pargs::write(::apache::thrift::protocol::TProtocol* oprot) const {
  uint32_t xfer = 0;
  apache::thrift::protocol::TOutputRecursionTracker tracker(*oprot);
  xfer += oprot->writeStructBegin("talkServer_postShip_pargs");

  xfer += oprot->writeFieldBegin("channel", ::apache::thrift::protocol::T_STRING, 1);
  xfer += oprot->writeString((*(this->channel)));
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldBegin("ship", ::apache::thrift::protocol::T_STRUCT, 2);
  xfer += (*(this->ship)).write(oprot);
  xfer += oprot->writeFieldEnd();

  xfer += oprot->writeFieldStop();
  xfer += oprot->writeStructEnd();
  return xfer;
}

void talkServerClient::getVersion()
{
  send_getVersion();
}

void talkServerClient::send_getVersion()
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("getVersion", ::apache::thrift::protocol::T_ONEWAY, cseqid);

  talkServer_getVersion_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void talkServerClient::setUserName(const std::string& name)
{
  send_setUserName(name);
}

void talkServerClient::send_setUserName(const std::string& name)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("setUserName", ::apache::thrift::protocol::T_ONEWAY, cseqid);

  talkServer_setUserName_pargs args;
  args.name = &name;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void talkServerClient::subscribe(const std::string& topic)
{
  send_subscribe(topic);
}

void talkServerClient::send_subscribe(const std::string& topic)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("subscribe", ::apache::thrift::protocol::T_ONEWAY, cseqid);

  talkServer_subscribe_pargs args;
  args.topic = &topic;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void talkServerClient::unsubscribe(const std::string& topic)
{
  send_unsubscribe(topic);
}

void talkServerClient::send_unsubscribe(const std::string& topic)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("unsubscribe", ::apache::thrift::protocol::T_ONEWAY, cseqid);

  talkServer_unsubscribe_pargs args;
  args.topic = &topic;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

void talkServerClient::postShip(const std::string& channel, const Ship& ship)
{
  send_postShip(channel, ship);
}

void talkServerClient::send_postShip(const std::string& channel, const Ship& ship)
{
  int32_t cseqid = 0;
  oprot_->writeMessageBegin("postShip", ::apache::thrift::protocol::T_ONEWAY, cseqid);

  talkServer_postShip_pargs args;
  args.channel = &channel;
  args.ship = &ship;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();
}

bool talkServerProcessor::dispatchCall(::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol* oprot, const std::string& fname, int32_t seqid, void* callContext) {
  ProcessMap::iterator pfn;
  pfn = processMap_.find(fname);
  if (pfn == processMap_.end()) {
    iprot->skip(::apache::thrift::protocol::T_STRUCT);
    iprot->readMessageEnd();
    iprot->getTransport()->readEnd();
    ::apache::thrift::TApplicationException x(::apache::thrift::TApplicationException::UNKNOWN_METHOD, "Invalid method name: '"+fname+"'");
    oprot->writeMessageBegin(fname, ::apache::thrift::protocol::T_EXCEPTION, seqid);
    x.write(oprot);
    oprot->writeMessageEnd();
    oprot->getTransport()->writeEnd();
    oprot->getTransport()->flush();
    return true;
  }
  (this->*(pfn->second))(seqid, iprot, oprot, callContext);
  return true;
}

void talkServerProcessor::process_getVersion(int32_t, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol*, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("talkServer.getVersion", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "talkServer.getVersion");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "talkServer.getVersion");
  }

  talkServer_getVersion_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "talkServer.getVersion", bytes);
  }

  try {
    iface_->getVersion();
  } catch (const std::exception&) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "talkServer.getVersion");
    }
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->asyncComplete(ctx, "talkServer.getVersion");
  }

  return;
}

void talkServerProcessor::process_setUserName(int32_t, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol*, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("talkServer.setUserName", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "talkServer.setUserName");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "talkServer.setUserName");
  }

  talkServer_setUserName_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "talkServer.setUserName", bytes);
  }

  try {
    iface_->setUserName(args.name);
  } catch (const std::exception&) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "talkServer.setUserName");
    }
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->asyncComplete(ctx, "talkServer.setUserName");
  }

  return;
}

void talkServerProcessor::process_subscribe(int32_t, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol*, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("talkServer.subscribe", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "talkServer.subscribe");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "talkServer.subscribe");
  }

  talkServer_subscribe_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "talkServer.subscribe", bytes);
  }

  try {
    iface_->subscribe(args.topic);
  } catch (const std::exception&) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "talkServer.subscribe");
    }
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->asyncComplete(ctx, "talkServer.subscribe");
  }

  return;
}

void talkServerProcessor::process_unsubscribe(int32_t, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol*, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("talkServer.unsubscribe", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "talkServer.unsubscribe");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "talkServer.unsubscribe");
  }

  talkServer_unsubscribe_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "talkServer.unsubscribe", bytes);
  }

  try {
    iface_->unsubscribe(args.topic);
  } catch (const std::exception&) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "talkServer.unsubscribe");
    }
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->asyncComplete(ctx, "talkServer.unsubscribe");
  }

  return;
}

void talkServerProcessor::process_postShip(int32_t, ::apache::thrift::protocol::TProtocol* iprot, ::apache::thrift::protocol::TProtocol*, void* callContext)
{
  void* ctx = NULL;
  if (this->eventHandler_.get() != NULL) {
    ctx = this->eventHandler_->getContext("talkServer.postShip", callContext);
  }
  ::apache::thrift::TProcessorContextFreer freer(this->eventHandler_.get(), ctx, "talkServer.postShip");

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->preRead(ctx, "talkServer.postShip");
  }

  talkServer_postShip_args args;
  args.read(iprot);
  iprot->readMessageEnd();
  uint32_t bytes = iprot->getTransport()->readEnd();

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->postRead(ctx, "talkServer.postShip", bytes);
  }

  try {
    iface_->postShip(args.channel, args.ship);
  } catch (const std::exception&) {
    if (this->eventHandler_.get() != NULL) {
      this->eventHandler_->handlerError(ctx, "talkServer.postShip");
    }
    return;
  }

  if (this->eventHandler_.get() != NULL) {
    this->eventHandler_->asyncComplete(ctx, "talkServer.postShip");
  }

  return;
}

::boost::shared_ptr< ::apache::thrift::TProcessor > talkServerProcessorFactory::getProcessor(const ::apache::thrift::TConnectionInfo& connInfo) {
  ::apache::thrift::ReleaseHandler< talkServerIfFactory > cleanup(handlerFactory_);
  ::boost::shared_ptr< talkServerIf > handler(handlerFactory_->getHandler(connInfo), cleanup);
  ::boost::shared_ptr< ::apache::thrift::TProcessor > processor(new talkServerProcessor(handler));
  return processor;
}

void talkServerConcurrentClient::getVersion()
{
  send_getVersion();
}

void talkServerConcurrentClient::send_getVersion()
{
  int32_t cseqid = 0;
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  oprot_->writeMessageBegin("getVersion", ::apache::thrift::protocol::T_ONEWAY, cseqid);

  talkServer_getVersion_pargs args;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
}

void talkServerConcurrentClient::setUserName(const std::string& name)
{
  send_setUserName(name);
}

void talkServerConcurrentClient::send_setUserName(const std::string& name)
{
  int32_t cseqid = 0;
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  oprot_->writeMessageBegin("setUserName", ::apache::thrift::protocol::T_ONEWAY, cseqid);

  talkServer_setUserName_pargs args;
  args.name = &name;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
}

void talkServerConcurrentClient::subscribe(const std::string& topic)
{
  send_subscribe(topic);
}

void talkServerConcurrentClient::send_subscribe(const std::string& topic)
{
  int32_t cseqid = 0;
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  oprot_->writeMessageBegin("subscribe", ::apache::thrift::protocol::T_ONEWAY, cseqid);

  talkServer_subscribe_pargs args;
  args.topic = &topic;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
}

void talkServerConcurrentClient::unsubscribe(const std::string& topic)
{
  send_unsubscribe(topic);
}

void talkServerConcurrentClient::send_unsubscribe(const std::string& topic)
{
  int32_t cseqid = 0;
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  oprot_->writeMessageBegin("unsubscribe", ::apache::thrift::protocol::T_ONEWAY, cseqid);

  talkServer_unsubscribe_pargs args;
  args.topic = &topic;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
}

void talkServerConcurrentClient::postShip(const std::string& channel, const Ship& ship)
{
  send_postShip(channel, ship);
}

void talkServerConcurrentClient::send_postShip(const std::string& channel, const Ship& ship)
{
  int32_t cseqid = 0;
  ::apache::thrift::async::TConcurrentSendSentry sentry(&this->sync_);
  oprot_->writeMessageBegin("postShip", ::apache::thrift::protocol::T_ONEWAY, cseqid);

  talkServer_postShip_pargs args;
  args.channel = &channel;
  args.ship = &ship;
  args.write(oprot_);

  oprot_->writeMessageEnd();
  oprot_->getTransport()->writeEnd();
  oprot_->getTransport()->flush();

  sentry.commit();
}

} // namespace

